# Manim Parameter Fix Database
# Common parameter errors and their corrections

parameter_fixes:
  # Text object parameter corrections
  Text:
    invalid_params:
      - "size"
      - "weight" 
      - "style"
      - "align"
    correct_mappings:
      "size": "font_size"
      "weight": null 
      "style": null  # Remove this parameter
      "align": null  # Remove this parameter
    valid_params:
      - "color"
      - "font_size" 
      - "font"
      - "line_spacing"
      - "disable_ligatures"
    examples:
      wrong: 'Text("Hello", size=48, weight=BOLD)'
      correct: 'Text("Hello", font_size=48)'
      
  # Tex object corrections
  Tex:
    invalid_params:
      - "size"
      - "weight"
    correct_mappings:
      "size": "font_size"
      "weight": null
    valid_params:
      - "color"
      - "font_size"
    examples:
      wrong: 'Tex("x^2", size=36)'
      correct: 'Tex("x^2", font_size=36)'
      
  # Shape object corrections  
  Circle:
    invalid_params:
      - "size"
      - "width"
      - "height"
    correct_mappings:
      "size": "radius"
      "width": null
      "height": null
    valid_params:
      - "radius"
      - "color"
      - "fill_color"
      - "fill_opacity"
      - "stroke_width"
    examples:
      wrong: 'Circle(size=2)'
      correct: 'Circle(radius=2)'
      
  Rectangle:
    invalid_params:
      - "size"
    correct_mappings:
      "size": null
    valid_params:
      - "width"
      - "height" 
      - "color"
      - "fill_color"
      - "fill_opacity"
    examples:
      wrong: 'Rectangle(size=3)'
      correct: 'Rectangle(width=3, height=2)'

# Axes object corrections
  Axes:
    deprecated_methods:
      - "get_graph"  # Use plot() instead
    method_replacements:
      "get_graph": "plot"
    invalid_params_in_plot:
      - "color"  # Set color separately with .set_color()
    examples:
      wrong: 'axes.get_graph(lambda x: x**2, color=BLUE)'
      correct: 'graph = axes.plot(lambda x: x**2); graph.set_color(BLUE)'

  # Function graph corrections
  FunctionGraph:
    invalid_params:
      - "color"  # Set color separately with .set_color()
    deprecated_constructors:
      - "get_graph"  # Use Axes.plot() instead
    examples:
      wrong: 'axes.get_graph(lambda x: x**2, color=BLUE)'
      correct: 'graph = axes.plot(lambda x: x**2).set_color(BLUE)'
      
# Common error patterns and fixes
error_patterns:
  get_graph_color_error:
    pattern: "axes\\.get_graph\\(.*?,\\s*color="
    replacement: "SPLIT_AND_FIX"
    description: "Split get_graph with color into plot() + set_color()"
  
  get_graph_any_color_error:
    pattern: "(\\w+)\\.get_graph\\(([^,)]+),\\s*color=([^,)]+)\\)"
    replacement: "\\1_graph = \\1.plot(\\2)\\n        \\1_graph.set_color(\\3)"
    description: "Replace any get_graph with color parameter"
    
  get_tangent_line_color_error:
    pattern: "(\\w+)\\.get_tangent_line\\(([^,)]+),\\s*([^,)]+),\\s*color=([^,)]+)\\)"
    replacement: "\\1_tangent = \\1.get_tangent_line(\\2, \\3)\\n        \\1_tangent.set_color(\\4)"
    description: "Fix get_tangent_line with color parameter"
  "unexpected keyword argument 'size'":
    description: "Using 'size' parameter which doesn't exist in many Manim objects"
    fix_strategy: "Replace with appropriate parameter or remove"
    object_specific:
      Text: "Replace size= with font_size="
      Circle: "Replace size= with radius="
      Rectangle: "Remove size=, ensure width= and height= are present"
      
  "unexpected keyword argument 'weight'":
    description: "Using 'weight' parameter which doesn't exist in Manim Text"  
    fix_strategy: "Remove weight parameter entirely"
    
  "unexpected keyword argument 'style'":
    description: "Using 'style' parameter which doesn't exist"
    fix_strategy: "Remove style parameter"

# Progressive fix strategies
fix_strategies:
  level_1_parameter_cleanup:
    - "Remove all invalid parameters"
    - "Replace mappable parameters"
    - "Keep only known valid parameters"
    
  level_2_api_modernization:
    - "ShowCreation → Create"
    - "DrawBorderThenFill → Create"
    - "Add proper imports"
    
  level_3_simplification:
    - "Replace complex objects with simple alternatives"
    - "Remove problematic positioning"
    - "Use basic colors only"
    
  level_4_template_fallback:
    - "Use pre-built working template"
    - "Insert only topic-specific text"
    - "Minimal animations guaranteed to work"

# Working templates for fallback
fallback_templates:
  simple_text_animation: |
    from manim import *
    
    class {class_name}(Scene):
        def construct(self):
            title = Text("{topic}")
            self.play(Write(title))
            self.wait(2)
            self.play(FadeOut(title))
            
            content = Text("{content_text}")
            self.play(FadeIn(content))
            self.wait(3)
            self.play(FadeOut(content))
            
  basic_educational: |
    from manim import *
    
    class {class_name}(Scene):
        def construct(self):
            # Title
            title = Text("{topic}", color=BLUE)
            title.to_edge(UP)
            self.play(Write(title))
            
            # Main content
            content = Text("{main_concept}")
            self.play(FadeIn(content))
            self.wait(2)
            
            # Clear and next concept
            self.play(FadeOut(content))
            next_content = Text("{secondary_concept}")
            self.play(FadeIn(next_content))
            self.wait(2)
            
            # Conclusion
            self.play(FadeOut(next_content), FadeOut(title))